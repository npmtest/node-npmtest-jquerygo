{"/home/travis/build/npmtest/node-npmtest-jquerygo/test.js":"/* istanbul instrument in package npmtest_jquerygo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jquerygo/lib.npmtest_jquerygo.js":"/* istanbul instrument in package npmtest_jquerygo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jquerygo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jquerygo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jquerygo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jquerygo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jquerygo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jquerygo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jquerygo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jquerygo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jquerygo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jquerygo.__dirname + '/lib.npmtest_jquerygo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jquerygo/node_modules/jquerygo/lib/jquery.go.js":"// Include the libraries.\nvar phantomjs = require('phantomjs')\nvar phantom =   require('phantom');\nvar async = require('async');\nvar _ = require('underscore');\nvar go = require('asyncgo');\n\n// The current page.\nvar page = null;\nvar pageQueue = [];\nvar instance = null;\nvar loading = true;\n\n// Create the phantom connection.\nphantom.create(\"--web-security=false\", \"--ignore-ssl-errors=true\", \"--ssl-protocol=any\", function(ph) {\n\n  // Save the instance.\n  instance = ph;\n\n  // Create the page.\n  return ph.createPage(function(pg) {\n\n    // Set the page.\n    page = pg;\n\n    // Num resources outstanding.\n    var resources = 0;\n\n    // Whether page has loaded.\n    var ready = false;\n\n    // Pass along console messages.\n    page.set('onConsoleMessage', function(msg) {\n      console.log('Console:' + msg);\n    });\n\n    // Log any errors.\n    page.set('onResourceError', function(err) {\n      console.log('ERROR: ' + err.errorString);\n    });\n\n    // Increment our outstanding resources counter.\n    page.set('onResourceRequested', function() {\n      if (ready) {\n        loading = true;\n        resources++;\n      }\n    });\n\n    // Fire an event when we have received a resource.\n    page.set('onResourceReceived', function(res) {\n      if (ready && (res.stage == 'end') && (--resources == 0)) {\n        loading = false;\n      }\n    });\n\n    // Trigger when the loading has started.\n    page.set('onLoadStarted', function() {\n      loading = true;\n    });\n\n    // Trigger when the loading has finished.\n    page.set('onLoadFinished', function() {\n      loading = (resources > 0);\n      ready = true;\n    });\n\n    // Empty the get page queue.\n    _.each(pageQueue, function(queue) {\n      queue(page);\n    });\n  });\n}, { binary: phantomjs.path });\n\n/**\n * Returns the current page within the phantom browser.\n *\n * @param {function} callback\n *   Called with the page once it is available.\n */\nvar getPage = function(callback) {\n  if (page) {\n    callback(page);\n  }\n  else {\n    pageQueue.push(callback);\n  }\n};\n\n/**\n * jQuery Interface class.\n *\n * @param {string} selector\n *   The selector to use for the interface.\n * @param {string} context\n *   The context to use for the interface.\n *\n * @returns {jQueryInterface}\n */\nvar jQueryInterface = function(selector, context) {\n  this.selector = selector;\n  if (typeof context == 'function') {\n    this.context = null;\n    this.asyncExecute(null, null, context);\n  }\n  else {\n    this.context = context;\n  }\n\n  this.instance = -1;\n  this.index = -1;\n  this.length = -1;\n};\n\n/**\n *  Execute the query.\n */\njQueryInterface.prototype.asyncExecute = function(method, args, callback) {\n  var self = this;\n\n  // Get the page.\n  getPage(function(page) {\n\n    // Evaluate some javascript on this page.\n    page.evaluate(function(a) {\n      var query = null, retVal = {};\n      if (a.instance >= 0 && typeof window.phNodes[a.instance] !== undefined) {\n        query = window.phNodes[a.instance];\n      }\n      else {\n\n        // See if the selector is a stored node.\n        if (typeof a.selector == 'number' && typeof window.phNodes[a.selector] !== undefined) {\n          a.selector = window.phNodes[a.selector];\n        }\n\n        // See if the context is a stored node.\n        if (typeof a.context == 'number' && typeof window.phNodes[a.context] !== undefined) {\n          a.context = window.phNodes[a.context];\n        }\n\n        // Query the new jQuery item.\n        query = jQuery(a.selector, a.context);\n\n        // Add this to the phNodes array.\n        if (!window.phNodes) {\n          window.phNodes = [];\n        }\n        window.phNodes.push(query);\n        retVal.instance = (window.phNodes.length - 1);\n      }\n\n      retVal.length = query.length;\n\n      if (a.index >= 0) {\n        query = query.eq(a.index);\n      }\n\n      if (a.method) {\n        if (a.args.length > 0) {\n          retVal.value = query[a.method].apply(query, a.args);\n        }\n        else {\n          retVal.value = query[a.method]();\n        }\n      }\n      else {\n        retVal.value = query.length;\n      }\n\n      // Make sure not to return the whole jquery object.\n      if (typeof retVal.value.jquery === 'string') {\n        retVal.value = false;\n      }\n\n      // Return the value.\n      return retVal;\n    }, function(retVal) {\n\n      // Set the instance and length if they exist.\n      if (retVal.instance) {\n        self.instance = retVal.instance;\n      }\n\n      // Trigger the callback.\n      self.length = retVal.length;\n      callback.call(self, retVal.value);\n    }, {\n      selector: self.selector,\n      context: self.context,\n      instance: self.instance,\n      index: self.index,\n      method: method,\n      args: args\n    });\n  });\n};\n\n/**\n * Maps the calls made to the interface to a call made within PhantomJS browser.\n */\njQueryInterface.prototype.asyncCall = function() {\n  var self = this;\n  var args = _.filter(_.values(arguments), function(arg) {\n    return !!arg;\n  });\n  var method = args.shift();\n  var callback = args.pop();\n  context = function(val) {\n    if (loading) {\n      setTimeout(function() {\n        context.call(self, val);\n      }, 100);\n    } else {\n      callback.call(self, val);\n    }\n  }\n  this.asyncExecute(method, args, context);\n};\n\n// Set the go method.\njQueryInterface.prototype.go = go;\n\n// For each of the jQuery interfaces, add a prototype.\n_.each(['add', 'addBack', 'addClass', 'after', 'ajaxComplete', 'ajaxError',\n  'ajaxSend', 'ajaxStart', 'ajaxStop', 'ajaxSuccess', 'andSelf', 'animate',\n  'append', 'appendTo', 'attr', 'before', 'bind', 'blur', 'change', 'children',\n  'clearQueue', 'click', 'clone', 'closest', 'contents', 'css', 'data',\n  'dblclick', 'delay', 'delegate', 'dequeue', 'detach', 'die', 'empty', 'end',\n  'eq', 'error', 'fadeIn', 'fadeOut', 'fadeTo', 'fadeToggle', 'filter', 'find',\n  'finish', 'first', 'focus', 'focusin', 'focusout', 'get', 'has', 'hasClass',\n  'height', 'hide', 'hover', 'html', 'index', 'innerHeight', 'innerWidth',\n  'insertAfter', 'insertBefore', 'is', 'keydown', 'keypress', 'keyup', 'last',\n  'live', 'load', 'map', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove',\n  'mouseout', 'mouseover', 'mouseup', 'next', 'nextAll', 'nextUntil', 'not',\n  'off', 'offset', 'offsetParent', 'on', 'one', 'outerHeight', 'outerWidth',\n  'parent', 'parents', 'parentsUntil', 'position', 'prepend', 'prependTo',\n  'prev', 'prevAll', 'prevUntil', 'promise', 'prop', 'pushStack', 'queue',\n  'ready', 'remove', 'removeAttr', 'removeClass', 'removeData', 'removeProp',\n  'replaceAll', 'replaceWith', 'resize', 'scroll', 'scrollLeft', 'scrollTop',\n  'select', 'serialize', 'serializeArray', 'show', 'siblings', 'size', 'slice',\n  'slideDown', 'slideToggle', 'slideUp', 'stop', 'submit', 'text', 'toArray',\n  'toggle', 'toggleClass', 'trigger', 'triggerHandler', 'unbind', 'undelegate',\n  'unload', 'unwrap', 'val', 'width', 'wrap', 'wrapAll', 'wrapInner'\n], function(method) {\n\n  // Add the prototype for that method.\n  jQueryInterface.prototype[method] = function() {\n    var args = _.values(arguments);\n    args.unshift(method);\n    return this.asyncCall.apply(this, args);\n  };\n});\n\n/**\n * Implement the each method.\n *\n * @param function callback\n *   The callback that is called for each item.\n * @param function done\n *   The function that is called when all of the items have been iterated.\n */\njQueryInterface.prototype.each = function(callback, done) {\n  var self = this;\n\n  // If the length has not yet been defined.\n  if (this.length < 0) {\n    this.eq(0, function() {\n      if (!self.length) {\n        done(true);\n      }\n      else {\n        self.each(callback, done);\n      }\n    });\n  }\n  else {\n    this.index++;\n    if (this.index >= this.length) {\n      done();\n    }\n    else {\n      callback.call(this, this.index, this, function() {\n        self.each(callback, done);\n      });\n    }\n  }\n};\n\n/**\n * Define the jQuery() interface.\n *\n * @param {type} selector\n * @param {type} context\n * @returns {jQuery.Anonym$0}\n */\nvar jQuery = _.extend(function(selector, context) {\n\n  // If this already is a jQueryInterface.\n  if (typeof selector === 'object') {\n    return selector;\n  }\n  else {\n    // Return a new jQuery Interface.\n    return new jQueryInterface(selector, context);\n  }\n}, {\n\n  /**\n   * Ability to change the configs.\n   */\n  config: {\n    addJQuery: true,\n    jQuery: '//code.jquery.com/jquery-1.11.1.min.js',\n    site: '',\n    width: 1920,\n    height: 1080,\n    debug: true\n  },\n\n  /**\n   * Keep track when the viewport size has been set.\n   */\n  viewportSizeSet: false,\n\n  /**\n   * Send a debug message to the console.\n   */\n  debug: function(msg) {\n    if (this.config.debug) {\n      console.log(msg);\n    }\n  },\n\n  /**\n   * Wait a period of time.\n   */\n  wait: function(time, done) {\n    var self = this;\n    setTimeout(function() {\n      done.call(self);\n    }, time);\n  },\n\n  /**\n   * Used to visit a page.\n   *\n   * @param {string} url\n   *   The url you wish to visit.\n   * @param {function} callback\n   *   Called when the page is done visiting.\n   */\n  visit: function(url, callback) {\n    var self = this;\n    getPage(function(page) {\n\n      // Set the page size if it hasn't already been set.\n      if (!self.viewportSizeSet) {\n        self.viewportSizeSet = true;\n        page.set('viewportSize', {\n          width: self.config.width,\n          height: self.config.height\n        }, function (result) {\n          self.debug(\"Viewport set to: \" + result.width + \"x\" + result.height);\n        });\n      }\n\n      // Open the page.\n      self.debug('Navigating to ' + self.config.site + url);\n      page.open(self.config.site + url, function(status) {\n        if (status == 'fail') {\n          self.close();\n          process.exit();\n          return;\n        }\n        if (self.config.addJQuery) {\n          var loadJS = function() {\n            if (loading) {\n              setTimeout(loadJS, 100);\n            }\n            else {\n              page.includeJs(self.config.jQuery, callback);\n            }\n          }\n          loadJS();\n        }\n        else {\n          self.waitForPage(callback);\n        }\n      });\n    });\n  },\n\n  /**\n   * Wait for the page to load.\n   *\n   * @param {type} callback\n   * @returns {undefined}\n   */\n  waitForPage: function(callback, nowait) {\n    var self = this;\n    var loadWait = function() {\n      setTimeout(function() {\n        self.waitForPage(callback, true);\n      }, 100);\n    };\n    if (nowait) {\n      if (loading) {\n        loadWait();\n      }\n      else {\n        getPage(function(page) {\n          page.evaluate(function() {\n            return jQuery.isReady;\n          }, function(ready) {\n            if (ready) {\n              callback.call(self);\n            }\n            else {\n              loadWait();\n            }\n          });\n        });\n      }\n    }\n    else {\n      loadWait();\n    }\n  },\n\n  /**\n   * Waits for an element to be present.\n   */\n  waitForElement: function(element, callback, nowait) {\n    var self = this;\n    if (!nowait) {\n      this.waitForPage(function() {\n        self.waitForElement(element, callback, true);\n      });\n    }\n    else {\n      var loadWait = function() {\n        setTimeout(function() {\n          self.waitForElement(element, callback, true);\n        }, 100);\n      };\n      if (nowait) {\n        getPage(function(page) {\n          page.evaluate(function(element) {\n            var element = jQuery(element);\n            return ((element.length > 0) && element.is(':visible'));\n          }, function(found) {\n            if (found) {\n              self.debug('Element ' + element + ' found');\n              callback.call(self);\n            }\n            else {\n              loadWait();\n            }\n          }, element);\n        });\n      }\n      else {\n        loadWait();\n      }\n    }\n  },\n\n  /**\n   * Capture the page as an image.\n   */\n  capture: function(filename, done) {\n    this.debug('Capturing page at ' + filename);\n    getPage(function(page) {\n      page.render(filename, done);\n    });\n  },\n\n  /**\n   * Upload File to a Form.\n   */\n  uploadFile: function(selector, filename, done) {\n    self.debug('Upload file to ' + selector);\n    getPage(function(page) {\n      page.uploadFile(selector, filename, done);\n    });\n  },\n\n  /**\n   * Close the phantom browser.\n   * @returns {undefined}\n   */\n  close: function() {\n\n    // Close the phantom browser instance.\n    if (instance) {\n      this.debug('Closing');\n      instance.exit();\n    }\n  },\n\n  /**\n   * Prints to the console.\n   */\n  print: function(text, done) {\n    console.log(text);\n    done();\n  },\n\n  /**\n   * The getPage method.\n   */\n  getPage: getPage,\n\n  /**\n   * The go method.\n   */\n  go: go\n});\n\nmodule.exports = jQuery;\n"}